import type { Metadata } from 'next';
import './globals.css';
import useUser from '@/hooks/user';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { authRoutes } from '@/config/consts';

// import localFont from 'next/font/local';
// const geistSans = localFont({
//   src: './fonts/GeistVF.woff',
//   variable: '--font-geist-sans',
//   weight: '100 900',
// });

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
};

export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    const [latestRoute, setLatestRoute] = useState<string>('/');
    const { currentUser, isAuthLoading } = useUser();
    const { route, replace } = useRouter();

    // Handle route changes based on auth state
    useEffect(() => {
        // If auth is still loading -> no need to check
        if (isAuthLoading) return;

        async function updateRoute() {
            if (currentUser) {
                if (authRoutes.includes(route)) {
                    // If user is authenticated and tries to access an auth route
                    //  -> redirect to latest route
                    await replace(latestRoute);
                }
            } else if (!authRoutes.includes(route)) {
                // If user is not authenticated and tries to access a protected route
                //  -> redirect to login
                setLatestRoute(route);
                await replace(authRoutes[0]);
            }
        }

        updateRoute();
    }, [route, currentUser, isAuthLoading, latestRoute, replace]);

    return (
        <html lang="en">
            <body className="antialiased">{children}</body>
        </html>
    );
}
